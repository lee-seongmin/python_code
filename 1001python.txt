자료구조

시퀸스 -> 인덱스(순서가 있다)

파이썬 유니코드 사용,
바이트 시퀸스 bytes(10)<- 수정가능
바이트 배열 bytearray <-수정 불가능

튜플 -> 변경 불가능!!!!!!!!!!

tuple(seq)


튜플 -> (소괄호 사용)

리스트 ->[ 대괄호 사용]

set ={중괄호 사용}

set의 내부요소의 순서는 없다

자료구조의 요소추가 방법이 달라
list -> append
set-> add

집합에 관련된 연산 가능
.issubset --> 부분집합 메서드, set에서의 <는 집합 기호

파이썬에서의 기호는 여러방식으로 쓰일수 있다.

.intersection (교집합 구하기 가능), &와 같다. <-- 연산자와 메써드 모두 사용 가능




파일에서 값 읽기 
 
file = open("파일 이름","r")

for line in file:
linewords = line.split()<- 빈칸 체크후 분리,linewords 는 리스트
for word in lineword:
words.add("임의 값")

파일을 읽고 문장속에 있는 단어중 중복되지 않는 숫자 출력
def process(w):
    output = ""
    for ch in w:
        if(ch.isalpha()):
            output +=ch
    return output.lower()
words = set()        
            


fname = input("입력 파일 이름: ")
file = open(fname,"r")

for line in file:
    linewords = line.split()<-- 잘라내기
    for word in linewords:
        words.add(process(word))
        
        
print("사용된 단어의 개수= ",len(words))
print(words)
        

set는 같은 요소는 추가하지 않는다.


딕셔너리 ={키값:진짜 값,중괄호}

키값을 주면 값을 출력해준다.

직접 인덱싱 가능[ 키값], .get(키값) <-- 모두 같다. 

우리가 원하는 것은 키값. 키값을 알면 그 값을 알수 있다

키값을 주고 값을 주면 추가 가능하다.

.pop 메쏘드

딕셔너리를 사용하여 단어 갯수 파악, 함수로 알파벳 확인 및 소문자 변경
def process(w):
    output = ""
    for ch in w:
        if(ch.isalpha()):##알파벳 확인
            output +=ch
    return output.lower() ##소문자

words = dict()                    


fname = input("입력 파일 이름: ")
file = open(fname,"r")

for line in file:
    linewords = line.split()##리스트
    for word in linewords:
        if word not in words:
            words[word] =1
        else:
            words[word] +=1
        
print(words)


특수 문자가 입력된경우 값의 반환(코드 수정바람& 성공 못함)

dic = {'B4':'Befor', 'TX':'Thanks' ,'BBL':'Be Back Later', 'BCNU':'Be Seeing You', 'HAND':'Have A Nice Day'}

sen =  input("번역할 문장을 입력하시오: ")

linewords = sen.split()
for word in linewords
    if word in dic:
        print(dic[linewords])


슬라이싱 --> 원하는 만큼 자를수있다. 


.replace(" "(A),""(B)) <-- 빈칸을 없에준다. A를 B로 바꾸어줌


회문을 확인해주는 함수 코드
def check_pal(s):
    low = 0
    high = len(s) - 1
    while True:
        if low > high:
            return True
        
        a = s[low]
        b = s[high]
        
        if a != b:
            return False
        
        low +=1
        high -=1


약어 출력 프로그램

sen = input("문자열을 입력하시오 : ")
a = ""
for i in sen.split():
    a +=i[0]
print(a)



CSV파일 요소가 콤마로 이루어짐

split(",") --> 콤마 기준으로 분리가 된다
split( ) --> 공백이 기준이 된다.


디렉토리를 이용한 전화번호부 제작

grup = dict()

while(1):
   
      a = input("(입력모드)이름을 입력하시오: ")
      if (a == ""):
          break
      
      b = input("(입력모드)전화번호를 입력하시오: ")
      
      grup[a] = b
    
while(1):
        
      c = input("(검색모드)이름을 입력하시오: ")
      if c not in grup:
          print("결과가 없습니다.")
          break
      print(c,"의 전화번호는",grup[c],"입니다.")
        