시퀀스에 속하는 자료구조들은 동일한 연산을 지원합니다.

시퀀스: 바이트 시퀀스, 바이트 배열

바이트 시퀀스 :수정가능
바이트 배열: 수정불가

튜플

(, , ,) ->리스트와 거의 동일 수정은 안 된다.

tuple(seq)==> 리스트를 튜플로 변환한다. 리스트를 튜플로 바꾸는 방법 검색해보기.

return (튜플, 튜플)

세트(set)
집합: not 시퀀스 대괄호 사용한다. { } mutable수정가능
인덱스가 없기때문에 슬라이싱이 안 된다.

add 세트에 요소 추가하기!

A > B b가 a의 부분집합인가를 나타낼때 맞으면true

B.issubset(A) 메소드

|합집합 union()메소드

& 교집합 다른 방법: intersection()메소드

- 차집합

리스트에서 세트로 

def process(w):
	output = " "
	for ch in w:
		if(ch,isalpah()): # 알파벳만 남기고 나머지 제거
			output +=ch
	return output.lower() #소문자로 바꿔서 리턴
words = set()

1. 파일을 불러오기

file = open(fname, "r")==>c랑 동일

파일의 모든 줄에 대해 반복한다.
for line in file: #\n이 나올때까지의 한 줄을 가져온다.
	lineWords = line.split() # split하고 빈칸을 다 없애고 리스트로 만들어 준다. 그래서 line Words는 리스트가 된다.
	for word in lineWords:
		words.add(process(word)) # 단어를 세트에 추가한다.
print("사용된 단어의 개수 = ", len(words)) 
print(words)

딕셔너리 찾아보기 {}를 사용한다.
['key']
indexing["key"] get(key, "없음")==> 찾을 수 없을 때 default message 출력해준다.

삭제할때는 pop을 사용한다.
items()메소드 ==> 순서는 알 수 없다. 상황에 따라 다르다.

#단어 카운터

파일을 열고
한줄씩 분리해야하고
리스트를 사용해야 한다.
비교를 위해선 대문자를 소문자로 바꾸는 것도 있으면 좋음
딕셔너리에 단어를 넣어서 할껀데
get함수를 사용해서 있는지 없는지 파악 있으면value를 1증가 없으면 value를 고정시킨다.

축약어  풀어 쓰기 ==> 책 있는 친구한테 물어보기.

인덱싱이 되는 시퀀스는 슬라이싱도 가능

[0:2] =0,1qjs

#회문 검사하기

replace ==(" ","") 띄어쓰기를 없애주는 방법

알고리즘 : low와 high를 선언
	low=0
	len(s)-1
	while True:
	if low >high:
		return True
대문자를 바꾸는 방법==> upper()

#csv
split(",") ,를 기준으로 분리해준다.

문자열을 dictionary를 만들고 문자열을 하나씩 가져온다.

